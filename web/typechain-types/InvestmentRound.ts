/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface InvestmentRoundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrower"
      | "closeRound"
      | "getInvestorCount"
      | "getInvestorInfo"
      | "getRoundStatus"
      | "getTermsHash"
      | "investorCount"
      | "investors"
      | "roundNameHash"
      | "roundOpen"
      | "signTerms"
      | "termsHash"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTermsHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roundNameHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roundOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "signTerms", values?: undefined): string;
  encodeFunctionData(functionFragment: "termsHash", values?: undefined): string;

  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTermsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundNameHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "termsHash", data: BytesLike): Result;
}

export interface InvestmentRound extends BaseContract {
  connect(runner?: ContractRunner | null): InvestmentRound;
  waitForDeployment(): Promise<this>;

  interface: InvestmentRoundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrower: TypedContractMethod<[], [string], "view">;

  closeRound: TypedContractMethod<[], [void], "nonpayable">;

  getInvestorCount: TypedContractMethod<[], [bigint], "view">;

  getInvestorInfo: TypedContractMethod<
    [_investor: AddressLike],
    [bigint],
    "view"
  >;

  getRoundStatus: TypedContractMethod<[], [boolean], "view">;

  getTermsHash: TypedContractMethod<[], [string], "view">;

  investorCount: TypedContractMethod<[], [bigint], "view">;

  investors: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  roundNameHash: TypedContractMethod<[], [string], "view">;

  roundOpen: TypedContractMethod<[], [boolean], "view">;

  signTerms: TypedContractMethod<[], [void], "payable">;

  termsHash: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "closeRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getInvestorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInvestorInfo"
  ): TypedContractMethod<[_investor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundStatus"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTermsHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "investorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "investors"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "roundNameHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roundOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "signTerms"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "termsHash"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
